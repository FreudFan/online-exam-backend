/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 8.0.19 : Database - online_exercise_test
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`online_exercise_test` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci */ /*!80016 DEFAULT ENCRYPTION='N' */;

USE `online_exercise_test`;

/*Table structure for table `email_message` */

DROP TABLE IF EXISTS `email_message`;

CREATE TABLE `email_message` (
  `id` int NOT NULL AUTO_INCREMENT,
  `tos` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `subject` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `createtime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updatetime` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='邮件发送记录';

/*Data for the table `email_message` */

/*Table structure for table `exam` */

DROP TABLE IF EXISTS `exam`;

CREATE TABLE `exam` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT 'id标识',
  `subject_id` int DEFAULT NULL COMMENT '科目id',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '试卷名称',
  `totalScore` int NOT NULL COMMENT '试卷总分',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '试卷描述',
  `difficult` int DEFAULT NULL COMMENT '试卷难度',
  `flag` int NOT NULL DEFAULT '1' COMMENT '试卷标识,标识试卷可不可用 1:可用 0:不可用',
  `createBy` int DEFAULT NULL COMMENT '记录试卷创建人id',
  `updateBy` int DEFAULT NULL COMMENT '最后更新人id',
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '最后更新时间',
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='试卷表';

/*Data for the table `exam` */

insert  into `exam`(`id`,`subject_id`,`name`,`totalScore`,`description`,`difficult`,`flag`,`createBy`,`updateBy`,`updatetime`,`createtime`) values (1,1,'计算机网络1',100,'计算机网络试卷1',1,1,1,1,'2020-04-26 19:40:45','2020-04-26 19:40:45'),(2,1,'计算机网络试卷2',100,'计算机网络试卷2',1,1,1,1,'2020-04-26 20:56:22','2020-04-26 20:56:22'),(3,1,'计算机网络试卷3',100,'计算机网络试卷3',1,1,1,1,'2020-04-26 20:56:45','2020-04-26 20:56:45'),(4,3,'大学英语试卷1',100,'大学英语20道题',2,1,1,1,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(5,2,'test123',100,'test',2,1,1,1,'2020-04-27 21:24:59','2020-04-27 21:24:59'),(6,5,'J2EE',100,'J2EE试卷',2,1,1,1,'2020-04-27 21:58:37','2020-04-27 21:58:37');

/*Table structure for table `exam_detail` */

DROP TABLE IF EXISTS `exam_detail`;

CREATE TABLE `exam_detail` (
  `id` int NOT NULL AUTO_INCREMENT,
  `exam_id` int NOT NULL,
  `topic_id` int NOT NULL,
  `topicmark` double DEFAULT NULL,
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP,
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=71 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

/*Data for the table `exam_detail` */

insert  into `exam_detail`(`id`,`exam_id`,`topic_id`,`topicmark`,`createtime`,`updatetime`) values (1,1,21,10,'2020-04-26 19:40:45','2020-04-26 19:40:45'),(2,1,1,10,'2020-04-26 19:40:45','2020-04-26 19:40:45'),(3,1,6,10,'2020-04-26 19:40:45','2020-04-26 19:40:45'),(4,1,24,10,'2020-04-26 19:40:45','2020-04-26 19:40:45'),(5,1,7,10,'2020-04-26 19:40:45','2020-04-26 19:40:45'),(6,1,11,10,'2020-04-26 19:40:45','2020-04-26 19:40:45'),(7,1,41,10,'2020-04-26 19:40:45','2020-04-26 19:40:45'),(8,1,42,10,'2020-04-26 19:40:45','2020-04-26 19:40:45'),(9,1,14,10,'2020-04-26 19:40:45','2020-04-26 19:40:45'),(10,1,18,10,'2020-04-26 19:40:45','2020-04-26 19:40:45'),(11,2,22,10,'2020-04-26 20:56:22','2020-04-26 20:56:22'),(12,2,6,10,'2020-04-26 20:56:22','2020-04-26 20:56:22'),(13,2,37,10,'2020-04-26 20:56:22','2020-04-26 20:56:22'),(14,2,11,10,'2020-04-26 20:56:22','2020-04-26 20:56:22'),(15,2,13,10,'2020-04-26 20:56:22','2020-04-26 20:56:22'),(16,2,42,10,'2020-04-26 20:56:22','2020-04-26 20:56:22'),(17,2,14,10,'2020-04-26 20:56:22','2020-04-26 20:56:22'),(18,2,43,10,'2020-04-26 20:56:22','2020-04-26 20:56:22'),(19,2,15,10,'2020-04-26 20:56:22','2020-04-26 20:56:22'),(20,2,18,10,'2020-04-26 20:56:22','2020-04-26 20:56:22'),(21,3,21,10,'2020-04-26 20:56:45','2020-04-26 20:56:45'),(22,3,22,10,'2020-04-26 20:56:46','2020-04-26 20:56:46'),(23,3,5,10,'2020-04-26 20:56:46','2020-04-26 20:56:46'),(24,3,6,10,'2020-04-26 20:56:46','2020-04-26 20:56:46'),(25,3,23,10,'2020-04-26 20:56:46','2020-04-26 20:56:46'),(26,3,24,10,'2020-04-26 20:56:46','2020-04-26 20:56:46'),(27,3,38,10,'2020-04-26 20:56:46','2020-04-26 20:56:46'),(28,3,10,10,'2020-04-26 20:56:46','2020-04-26 20:56:46'),(29,3,14,10,'2020-04-26 20:56:46','2020-04-26 20:56:46'),(30,3,17,10,'2020-04-26 20:56:46','2020-04-26 20:56:46'),(31,4,1,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(32,4,5,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(33,4,6,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(34,4,7,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(35,4,8,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(36,4,10,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(37,4,11,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(38,4,12,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(39,4,13,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(40,4,14,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(41,4,15,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(42,4,16,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(43,4,17,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(44,4,18,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(45,4,20,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(46,4,23,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(47,4,36,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(48,4,41,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(49,4,42,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(50,4,43,5,'2020-04-26 20:57:42','2020-04-26 20:57:42'),(51,5,124,10,'2020-04-27 21:24:59','2020-04-27 21:24:59'),(52,5,108,10,'2020-04-27 21:24:59','2020-04-27 21:24:59'),(53,5,125,10,'2020-04-27 21:24:59','2020-04-27 21:24:59'),(54,5,110,10,'2020-04-27 21:24:59','2020-04-27 21:24:59'),(55,5,111,10,'2020-04-27 21:24:59','2020-04-27 21:24:59'),(56,5,141,10,'2020-04-27 21:24:59','2020-04-27 21:24:59'),(57,5,142,10,'2020-04-27 21:24:59','2020-04-27 21:24:59'),(58,5,116,10,'2020-04-27 21:24:59','2020-04-27 21:24:59'),(59,5,117,10,'2020-04-27 21:24:59','2020-04-27 21:24:59'),(60,5,118,10,'2020-04-27 21:24:59','2020-04-27 21:24:59'),(61,6,213,10,'2020-04-27 21:58:37','2020-04-27 21:58:37'),(62,6,194,10,'2020-04-27 21:58:37','2020-04-27 21:58:37'),(63,6,216,10,'2020-04-27 21:58:37','2020-04-27 21:58:37'),(64,6,200,10,'2020-04-27 21:58:37','2020-04-27 21:58:37'),(65,6,203,10,'2020-04-27 21:58:37','2020-04-27 21:58:37'),(66,6,204,10,'2020-04-27 21:58:37','2020-04-27 21:58:37'),(67,6,232,10,'2020-04-27 21:58:37','2020-04-27 21:58:37'),(68,6,206,10,'2020-04-27 21:58:37','2020-04-27 21:58:37'),(69,6,208,10,'2020-04-27 21:58:37','2020-04-27 21:58:37'),(70,6,236,10,'2020-04-27 21:58:37','2020-04-27 21:58:37');

/*Table structure for table `exam_record` */

DROP TABLE IF EXISTS `exam_record`;

CREATE TABLE `exam_record` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT 'id标识',
  `exam_id` int DEFAULT NULL COMMENT '试卷id',
  `user_id` int NOT NULL COMMENT '用户id',
  `score` double DEFAULT NULL COMMENT '成绩',
  `beginTime` datetime DEFAULT NULL COMMENT '考试开始时间',
  `endTime` datetime DEFAULT NULL COMMENT '考试结束时间',
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '最后更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='考试记录';

/*Data for the table `exam_record` */

insert  into `exam_record`(`id`,`exam_id`,`user_id`,`score`,`beginTime`,`endTime`,`createtime`,`updatetime`) values (1,1,2,40,'2020-04-26 20:36:20','2020-04-26 07:37:24','2020-04-26 20:36:20','2020-04-26 20:36:20'),(2,1,2,10,'2020-04-26 22:24:36','2020-04-26 09:46:47','2020-04-26 22:24:36','2020-04-26 22:24:36'),(3,3,2,NULL,'2020-04-26 22:35:37',NULL,'2020-04-26 22:35:37','2020-04-26 22:35:37'),(4,4,2,NULL,'2020-04-26 22:36:20',NULL,'2020-04-26 22:36:20','2020-04-26 22:36:20'),(5,2,2,10,'2020-04-26 22:39:41','2020-04-26 10:05:03','2020-04-26 22:39:41','2020-04-26 22:39:41'),(6,1,2,10,'2020-04-26 22:50:39','2020-04-26 09:50:51','2020-04-26 22:50:39','2020-04-26 22:50:39'),(7,1,2,0,'2020-04-26 22:52:53','2020-04-26 09:52:56','2020-04-26 22:52:53','2020-04-26 22:52:53'),(8,1,2,0,'2020-04-26 22:53:11','2020-04-26 09:53:14','2020-04-26 22:53:11','2020-04-26 22:53:11'),(9,1,2,0,'2020-04-26 22:53:50','2020-04-26 09:53:53','2020-04-26 22:53:50','2020-04-26 22:53:50'),(10,1,2,0,'2020-04-26 22:57:48','2020-04-26 09:57:50','2020-04-26 22:57:48','2020-04-26 22:57:48'),(11,1,2,10,'2020-04-26 23:03:02','2020-04-26 10:03:09','2020-04-26 23:03:02','2020-04-26 23:03:02'),(12,1,2,30,'2020-04-26 23:07:05','2020-04-26 10:07:12','2020-04-26 23:07:05','2020-04-26 23:07:05'),(13,1,2,20,'2020-04-26 23:11:43','2020-04-26 10:11:50','2020-04-26 23:11:43','2020-04-26 23:11:43'),(14,1,2,0,'2020-04-26 23:12:18','2020-04-26 10:12:21','2020-04-26 23:12:18','2020-04-26 23:12:18'),(15,1,2,0,'2020-04-26 23:12:57','2020-04-26 10:13:00','2020-04-26 23:12:57','2020-04-26 23:12:57'),(16,2,2,0,'2020-04-26 23:13:30','2020-04-26 10:13:32','2020-04-26 23:13:30','2020-04-26 23:13:30'),(17,2,2,0,'2020-04-26 23:35:22','2020-04-26 10:35:26','2020-04-26 23:35:22','2020-04-26 23:35:22'),(18,2,2,0,'2020-04-26 23:36:36','2020-04-26 10:36:53','2020-04-26 23:36:36','2020-04-26 23:36:36'),(19,1,2,0,'2020-04-27 09:40:06','2020-04-27 10:51:34','2020-04-27 22:40:06','2020-04-27 22:40:06'),(20,2,2,NULL,'2020-04-27 10:35:01',NULL,'2020-04-27 23:35:01','2020-04-27 23:35:01');

/*Table structure for table `exam_record_topic` */

DROP TABLE IF EXISTS `exam_record_topic`;

CREATE TABLE `exam_record_topic` (
  `id` int NOT NULL AUTO_INCREMENT,
  `record_id` int NOT NULL COMMENT 'exam_record表主键关联',
  `topic_id` int NOT NULL COMMENT '题目表主键关联',
  `answer` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '用户做题答案',
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP,
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=283 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='做题记录表';

/*Data for the table `exam_record_topic` */

insert  into `exam_record_topic`(`id`,`record_id`,`topic_id`,`answer`,`createtime`,`updatetime`) values (11,1,1,'A','2020-04-26 20:37:23','2020-04-26 20:37:23'),(12,1,6,'B','2020-04-26 20:37:23','2020-04-26 20:37:23'),(13,1,7,'B','2020-04-26 20:37:23','2020-04-26 20:37:23'),(14,1,11,'B','2020-04-26 20:37:23','2020-04-26 20:37:23'),(15,1,14,'A','2020-04-26 20:37:24','2020-04-26 20:37:24'),(16,1,18,'B','2020-04-26 20:37:24','2020-04-26 20:37:24'),(17,1,21,'B','2020-04-26 20:37:24','2020-04-26 20:37:24'),(18,1,24,'C','2020-04-26 20:37:24','2020-04-26 20:37:24'),(19,1,41,'B','2020-04-26 20:37:24','2020-04-26 20:37:24'),(20,1,42,'D','2020-04-26 20:37:24','2020-04-26 20:37:24'),(58,2,1,'B','2020-04-26 22:47:40','2020-04-26 22:47:40'),(59,2,6,'A','2020-04-26 22:47:40','2020-04-26 22:47:40'),(60,2,7,'A','2020-04-26 22:47:40','2020-04-26 22:47:40'),(61,2,11,'A','2020-04-26 22:47:40','2020-04-26 22:47:40'),(62,2,14,'A','2020-04-26 22:47:40','2020-04-26 22:47:40'),(63,2,18,'C','2020-04-26 22:47:40','2020-04-26 22:47:40'),(64,2,21,'C','2020-04-26 22:47:40','2020-04-26 22:47:40'),(65,2,24,'B','2020-04-26 22:47:40','2020-04-26 22:47:40'),(66,2,41,'D','2020-04-26 22:47:40','2020-04-26 22:47:40'),(67,2,42,'B','2020-04-26 22:47:40','2020-04-26 22:47:40'),(78,6,1,'A','2020-04-26 22:50:50','2020-04-26 22:50:50'),(79,6,6,'A','2020-04-26 22:50:50','2020-04-26 22:50:50'),(80,6,7,'A','2020-04-26 22:50:50','2020-04-26 22:50:50'),(81,6,11,'A','2020-04-26 22:50:50','2020-04-26 22:50:50'),(82,6,14,'A','2020-04-26 22:50:50','2020-04-26 22:50:50'),(83,6,18,'A','2020-04-26 22:50:50','2020-04-26 22:50:50'),(84,6,21,'A','2020-04-26 22:50:50','2020-04-26 22:50:50'),(85,6,24,'A','2020-04-26 22:50:50','2020-04-26 22:50:50'),(86,6,41,'A','2020-04-26 22:50:50','2020-04-26 22:50:50'),(87,6,42,'A','2020-04-26 22:50:50','2020-04-26 22:50:50'),(108,7,1,'','2020-04-26 22:53:00','2020-04-26 22:53:00'),(109,7,6,'','2020-04-26 22:53:00','2020-04-26 22:53:00'),(110,7,7,'','2020-04-26 22:53:00','2020-04-26 22:53:00'),(111,7,11,'','2020-04-26 22:53:00','2020-04-26 22:53:00'),(112,7,14,'','2020-04-26 22:53:00','2020-04-26 22:53:00'),(113,7,18,'','2020-04-26 22:53:00','2020-04-26 22:53:00'),(114,7,21,'','2020-04-26 22:53:00','2020-04-26 22:53:00'),(115,7,24,'','2020-04-26 22:53:00','2020-04-26 22:53:00'),(116,7,41,'','2020-04-26 22:53:00','2020-04-26 22:53:00'),(117,7,42,'C','2020-04-26 22:53:00','2020-04-26 22:53:00'),(118,8,1,'','2020-04-26 22:53:14','2020-04-26 22:53:14'),(119,8,6,'','2020-04-26 22:53:14','2020-04-26 22:53:14'),(120,8,7,'','2020-04-26 22:53:14','2020-04-26 22:53:14'),(121,8,11,'','2020-04-26 22:53:14','2020-04-26 22:53:14'),(122,8,14,'','2020-04-26 22:53:14','2020-04-26 22:53:14'),(123,8,18,'','2020-04-26 22:53:14','2020-04-26 22:53:14'),(124,8,21,'','2020-04-26 22:53:14','2020-04-26 22:53:14'),(125,8,24,'','2020-04-26 22:53:14','2020-04-26 22:53:14'),(126,8,41,'','2020-04-26 22:53:14','2020-04-26 22:53:14'),(127,8,42,'','2020-04-26 22:53:14','2020-04-26 22:53:14'),(128,9,1,'','2020-04-26 22:53:52','2020-04-26 22:53:52'),(129,9,6,'','2020-04-26 22:53:52','2020-04-26 22:53:52'),(130,9,7,'','2020-04-26 22:53:53','2020-04-26 22:53:53'),(131,9,11,'','2020-04-26 22:53:53','2020-04-26 22:53:53'),(132,9,14,'','2020-04-26 22:53:53','2020-04-26 22:53:53'),(133,9,18,'','2020-04-26 22:53:53','2020-04-26 22:53:53'),(134,9,21,'','2020-04-26 22:53:53','2020-04-26 22:53:53'),(135,9,24,'','2020-04-26 22:53:53','2020-04-26 22:53:53'),(136,9,41,'','2020-04-26 22:53:53','2020-04-26 22:53:53'),(137,9,42,'','2020-04-26 22:53:53','2020-04-26 22:53:53'),(138,10,1,'','2020-04-26 22:57:50','2020-04-26 22:57:50'),(139,10,6,'','2020-04-26 22:57:50','2020-04-26 22:57:50'),(140,10,7,'','2020-04-26 22:57:50','2020-04-26 22:57:50'),(141,10,11,'','2020-04-26 22:57:50','2020-04-26 22:57:50'),(142,10,14,'','2020-04-26 22:57:50','2020-04-26 22:57:50'),(143,10,18,'','2020-04-26 22:57:50','2020-04-26 22:57:50'),(144,10,21,'','2020-04-26 22:57:50','2020-04-26 22:57:50'),(145,10,24,'','2020-04-26 22:57:50','2020-04-26 22:57:50'),(146,10,41,'','2020-04-26 22:57:50','2020-04-26 22:57:50'),(147,10,42,'','2020-04-26 22:57:50','2020-04-26 22:57:50'),(153,11,1,'A','2020-04-26 23:03:09','2020-04-26 23:03:09'),(154,11,6,'C','2020-04-26 23:03:09','2020-04-26 23:03:09'),(155,11,7,'C','2020-04-26 23:03:09','2020-04-26 23:03:09'),(156,11,11,'','2020-04-26 23:03:09','2020-04-26 23:03:09'),(157,11,14,'','2020-04-26 23:03:09','2020-04-26 23:03:09'),(158,11,18,'','2020-04-26 23:03:09','2020-04-26 23:03:09'),(159,11,21,'','2020-04-26 23:03:09','2020-04-26 23:03:09'),(160,11,24,'C','2020-04-26 23:03:09','2020-04-26 23:03:09'),(161,11,41,'C','2020-04-26 23:03:09','2020-04-26 23:03:09'),(162,11,42,'','2020-04-26 23:03:09','2020-04-26 23:03:09'),(169,5,6,'','2020-04-26 23:05:02','2020-04-26 23:05:02'),(170,5,11,'','2020-04-26 23:05:02','2020-04-26 23:05:02'),(171,5,13,'','2020-04-26 23:05:02','2020-04-26 23:05:02'),(172,5,14,'','2020-04-26 23:05:02','2020-04-26 23:05:02'),(173,5,15,'C','2020-04-26 23:05:02','2020-04-26 23:05:02'),(174,5,18,'C','2020-04-26 23:05:02','2020-04-26 23:05:02'),(175,5,22,'D','2020-04-26 23:05:02','2020-04-26 23:05:02'),(176,5,37,'C','2020-04-26 23:05:02','2020-04-26 23:05:02'),(177,5,42,'B','2020-04-26 23:05:02','2020-04-26 23:05:02'),(178,5,43,'C','2020-04-26 23:05:02','2020-04-26 23:05:02'),(185,12,1,'C','2020-04-26 23:07:12','2020-04-26 23:07:12'),(186,12,6,'','2020-04-26 23:07:12','2020-04-26 23:07:12'),(187,12,7,'C','2020-04-26 23:07:12','2020-04-26 23:07:12'),(188,12,11,'','2020-04-26 23:07:12','2020-04-26 23:07:12'),(189,12,14,'','2020-04-26 23:07:12','2020-04-26 23:07:12'),(190,12,18,'C','2020-04-26 23:07:12','2020-04-26 23:07:12'),(191,12,21,'','2020-04-26 23:07:12','2020-04-26 23:07:12'),(192,12,24,'A','2020-04-26 23:07:12','2020-04-26 23:07:12'),(193,12,41,'B','2020-04-26 23:07:12','2020-04-26 23:07:12'),(194,12,42,'B','2020-04-26 23:07:12','2020-04-26 23:07:12'),(200,13,1,'B','2020-04-26 23:11:49','2020-04-26 23:11:49'),(201,13,6,'','2020-04-26 23:11:49','2020-04-26 23:11:49'),(202,13,7,'D','2020-04-26 23:11:49','2020-04-26 23:11:49'),(203,13,11,'D','2020-04-26 23:11:49','2020-04-26 23:11:49'),(204,13,14,'D','2020-04-26 23:11:49','2020-04-26 23:11:49'),(205,13,18,'','2020-04-26 23:11:49','2020-04-26 23:11:49'),(206,13,21,'','2020-04-26 23:11:49','2020-04-26 23:11:49'),(207,13,24,'C','2020-04-26 23:11:49','2020-04-26 23:11:49'),(208,13,41,'','2020-04-26 23:11:50','2020-04-26 23:11:50'),(209,13,42,'','2020-04-26 23:11:50','2020-04-26 23:11:50'),(210,14,1,'','2020-04-26 23:12:20','2020-04-26 23:12:20'),(211,14,6,'','2020-04-26 23:12:21','2020-04-26 23:12:21'),(212,14,7,'','2020-04-26 23:12:21','2020-04-26 23:12:21'),(213,14,11,'','2020-04-26 23:12:21','2020-04-26 23:12:21'),(214,14,14,'','2020-04-26 23:12:21','2020-04-26 23:12:21'),(215,14,18,'','2020-04-26 23:12:21','2020-04-26 23:12:21'),(216,14,21,'','2020-04-26 23:12:21','2020-04-26 23:12:21'),(217,14,24,'','2020-04-26 23:12:21','2020-04-26 23:12:21'),(218,14,41,'','2020-04-26 23:12:21','2020-04-26 23:12:21'),(219,14,42,'','2020-04-26 23:12:21','2020-04-26 23:12:21'),(220,15,1,'','2020-04-26 23:12:59','2020-04-26 23:12:59'),(221,15,6,'','2020-04-26 23:12:59','2020-04-26 23:12:59'),(222,15,7,'','2020-04-26 23:12:59','2020-04-26 23:12:59'),(223,15,11,'','2020-04-26 23:12:59','2020-04-26 23:12:59'),(224,15,14,'','2020-04-26 23:12:59','2020-04-26 23:12:59'),(225,15,18,'','2020-04-26 23:12:59','2020-04-26 23:12:59'),(226,15,21,'','2020-04-26 23:12:59','2020-04-26 23:12:59'),(227,15,24,'','2020-04-26 23:12:59','2020-04-26 23:12:59'),(228,15,41,'','2020-04-26 23:12:59','2020-04-26 23:12:59'),(229,15,42,'','2020-04-26 23:12:59','2020-04-26 23:12:59'),(230,16,6,'','2020-04-26 23:13:32','2020-04-26 23:13:32'),(231,16,11,'','2020-04-26 23:13:32','2020-04-26 23:13:32'),(232,16,13,'','2020-04-26 23:13:32','2020-04-26 23:13:32'),(233,16,14,'','2020-04-26 23:13:32','2020-04-26 23:13:32'),(234,16,15,'','2020-04-26 23:13:32','2020-04-26 23:13:32'),(235,16,18,'','2020-04-26 23:13:32','2020-04-26 23:13:32'),(236,16,22,'','2020-04-26 23:13:32','2020-04-26 23:13:32'),(237,16,37,'','2020-04-26 23:13:32','2020-04-26 23:13:32'),(238,16,42,'','2020-04-26 23:13:32','2020-04-26 23:13:32'),(239,16,43,'','2020-04-26 23:13:32','2020-04-26 23:13:32'),(241,17,6,'C','2020-04-26 23:35:25','2020-04-26 23:35:25'),(242,17,11,'','2020-04-26 23:35:25','2020-04-26 23:35:25'),(243,17,13,'','2020-04-26 23:35:25','2020-04-26 23:35:25'),(244,17,14,'','2020-04-26 23:35:25','2020-04-26 23:35:25'),(245,17,15,'','2020-04-26 23:35:25','2020-04-26 23:35:25'),(246,17,18,'','2020-04-26 23:35:25','2020-04-26 23:35:25'),(247,17,22,'','2020-04-26 23:35:25','2020-04-26 23:35:25'),(248,17,37,'','2020-04-26 23:35:25','2020-04-26 23:35:25'),(249,17,42,'','2020-04-26 23:35:25','2020-04-26 23:35:25'),(250,17,43,'','2020-04-26 23:35:25','2020-04-26 23:35:25'),(256,18,6,'C','2020-04-26 23:36:52','2020-04-26 23:36:52'),(257,18,11,'C','2020-04-26 23:36:52','2020-04-26 23:36:52'),(258,18,13,'C','2020-04-26 23:36:52','2020-04-26 23:36:52'),(259,18,14,'A','2020-04-26 23:36:52','2020-04-26 23:36:52'),(260,18,15,'B','2020-04-26 23:36:53','2020-04-26 23:36:53'),(261,18,18,'','2020-04-26 23:36:53','2020-04-26 23:36:53'),(262,18,22,'','2020-04-26 23:36:53','2020-04-26 23:36:53'),(263,18,37,'','2020-04-26 23:36:53','2020-04-26 23:36:53'),(264,18,42,'','2020-04-26 23:36:53','2020-04-26 23:36:53'),(265,18,43,'','2020-04-26 23:36:53','2020-04-26 23:36:53'),(266,100,44,'A','2020-04-27 18:03:00','2020-04-27 18:03:00'),(273,19,1,'A','2020-04-27 23:51:33','2020-04-27 23:51:33'),(274,19,6,'C','2020-04-27 23:51:33','2020-04-27 23:51:33'),(275,19,7,'D','2020-04-27 23:51:33','2020-04-27 23:51:33'),(276,19,11,'A','2020-04-27 23:51:33','2020-04-27 23:51:33'),(277,19,14,'A','2020-04-27 23:51:33','2020-04-27 23:51:33'),(278,19,18,'C','2020-04-27 23:51:33','2020-04-27 23:51:33'),(279,19,21,'','2020-04-27 23:51:33','2020-04-27 23:51:33'),(280,19,24,'','2020-04-27 23:51:33','2020-04-27 23:51:33'),(281,19,41,'','2020-04-27 23:51:34','2020-04-27 23:51:34'),(282,19,42,'','2020-04-27 23:51:34','2020-04-27 23:51:34');

/*Table structure for table `information` */

DROP TABLE IF EXISTS `information`;

CREATE TABLE `information` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '资讯id',
  `content` varchar(255) DEFAULT NULL COMMENT '资讯内容',
  `subject_id` int DEFAULT NULL COMMENT '课程号',
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '更新时间',
  `createby` int DEFAULT NULL COMMENT '创建人',
  `updateby` int DEFAULT NULL COMMENT '最后更新人',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

/*Data for the table `information` */

/*Table structure for table `options` */

DROP TABLE IF EXISTS `options`;

CREATE TABLE `options` (
  `topic_id` int NOT NULL COMMENT '题目表id',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `content` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

/*Data for the table `options` */

insert  into `options`(`topic_id`,`name`,`content`) values (1,'A','FC-SAN存储'),(1,'B','IP-SAN存储'),(1,'C','本地硬盘'),(1,'D','本地内存盘'),(2,'A','应用按需分配资源'),(2,'B','广泛兼容各种软硬件'),(2,'C','自动化调度'),(2,'D','丰富的运维管理'),(2,'E','testE'),(2,'F','testF'),(3,'A','对'),(3,'B','错'),(4,'A','新建'),(4,'B','运行'),(4,'C','就绪'),(4,'D','死亡'),(4,'E','testE'),(5,'A','Q→（P∧Q）'),(5,'B','P→（P∧Q）'),(5,'C','（P∧Q）→P '),(5,'D','（P∨Q）→Q'),(6,'A','short'),(6,'B','long'),(6,'C','int'),(6,'D','byte'),(7,'A','类型定义机制'),(7,'B','数据封装机制'),(7,'C','类型定义机制和数据封装机制'),(7,'D','上述都不对'),(8,'A','先声明对象，然后才能使用对象'),(8,'B','先声明对象，喂对象分配内存空间，对对象初始化，然后才能使用对象'),(8,'C','先声明对象，喂对象分配内存空间，然后才能使用对象'),(8,'D','上述说法都对'),(9,'A','用基本数据类型作为参数'),(9,'B','用对象作为参数'),(9,'C','A和B都对'),(9,'D','A和B都不对'),(10,'A','一个子类可以有多个父类，一个父类也可以有多个子类'),(10,'B','一个子类可以有多个父类，但一个父类只可以有一个子类'),(10,'C','一个子类可以有一个父类，但一个父类可以有多个子类'),(10,'D','上述说法都不对'),(11,'A','安全性'),(11,'B','多线性'),(11,'C','跨平台'),(11,'D','可移植'),(12,'A','每次读入的字节数不同'),(12,'B','前者带有缓冲，后者没有'),(12,'C','前者是字符读写，后者是字节读写'),(12,'D','二者没有区别，可以互换使用'),(13,'A','default String s;'),(13,'B','public final static native int w()'),(13,'C','abstract double d;'),(13,'D','abstract final double hyperbolicCosine()'),(14,'A','class HasStatic {}'),(14,'B','pravite static int x=100;'),(14,'C','public static void main(String args[]){}'),(14,'D','HasStatic hs1=new HasStatic();'),(15,'A','int'),(15,'B','float'),(15,'C','double'),(15,'D','void'),(16,'A','start()'),(16,'B','init()'),(16,'C','run()'),(16,'D','synchronized()'),(17,'A','const'),(17,'B','double'),(17,'C','hello'),(17,'D','BigMeaninglessName'),(18,'A','transient'),(18,'B','static'),(18,'C','serialize'),(18,'D','synchronized'),(19,'A','static'),(19,'B','package'),(19,'C','private'),(19,'D','public'),(20,'A','java EE'),(20,'B','java Card'),(20,'C','java ME'),(20,'D','java HE'),(20,'E','testE'),(20,'F','java HE'),(21,'A','boolean = 1;'),(21,'B','boolean a=(9>=10);'),(21,'C','boolean a=\"真\"；'),(21,'D','boolean a ==false;'),(22,'A','STRING'),(22,'B','x3x;'),(22,'C','void'),(22,'D','de$f'),(23,'A','31.0'),(23,'B','0.0'),(23,'C','1.0'),(23,'D','2.0'),(24,'A','i++;'),(24,'B','i>5;'),(24,'C','bEqual = str.equals(\"q\");'),(24,'D','count ==i;'),(25,'A','<%--与--%>>'),(25,'B','/'),(25,'C','/**与**/'),(25,'D','<!--与-->'),(26,'A','Session'),(26,'B','application'),(26,'C','pageContext'),(26,'D','cookie'),(27,'A','short'),(27,'B','Boolean'),(27,'C','Double'),(27,'D','float'),(28,'A','数据组是一种对象'),(28,'B','数组属于一种原生类'),(28,'C','int number=[]={31,23,33,43,35,63}'),(28,'D','数组的大小可以任意改变'),(29,'A','private'),(29,'B','public'),(29,'C','protected'),(29,'D','static'),(30,'A','在类方法中可用this来调用本类的类方法'),(30,'B','在类方法中调用本类的类方法时可直接调用'),(30,'C','在类方法中只能调用本类的类方法'),(30,'D','在类方法中绝对不能调用实例方法'),(31,'A','new'),(31,'B','$Usdollars'),(31,'C','1234.0'),(31,'D','car.taxi'),(32,'A','void methods();'),(32,'B','public double methods();'),(32,'C','public final double methods();'),(32,'D','static void methods(double d1):'),(33,'A','Error'),(33,'B','Throwable'),(33,'C','Exception'),(33,'D','RuntimeException'),(34,'A','默认构造器有和它所在类相同的访问修饰词'),(34,'B','默认构造器可调用其他父类的无参构造器'),(34,'C','如果一个雷没有无参构造器，编译器会为它创建一个默认构造器'),(34,'D','只有当一个雷没有任何构造器时，编译器会为它创建一个默认构造器'),(35,'A','final void methods(){}'),(35,'B','void final methods(){}'),(35,'C','static void methods(){}'),(35,'D','static final void methods(){}'),(36,'A','long number = 345L;'),(36,'B','long number = 0345;'),(36,'C','long number = 0345L;'),(36,'D','long number = 0x345L;'),(37,'A','start()'),(37,'B','stop()'),(37,'C','init()'),(37,'D','paint()'),(38,'A','x[9]为0'),(38,'B','x[9]未定义'),(38,'C','x[10]为0'),(38,'D','x[0]为空'),(39,'A','对象、消息'),(39,'B','继承、多态'),(39,'C','类、封装'),(39,'D','过程调用'),(40,'A','（1011011）2'),(40,'B','（142）8'),(40,'C','（62）16'),(40,'D','（97）10'),(41,'A','23.5'),(41,'B','23.625'),(41,'C','23.75'),(41,'D','23.5125'),(42,'A','198.0'),(42,'B','-198.0'),(42,'C','58.0'),(42,'D','-58.0'),(43,'A','每秒处理百万个字符'),(43,'B','每分钟处理百万个字符'),(43,'C','每秒执行百万条指令'),(43,'D','每分钟执行百万条指令'),(44,'A','（1011011）2'),(44,'B','（142）8'),(44,'C','（62）16'),(44,'D','（97）10'),(45,'A','A'),(45,'B','B'),(45,'C','C'),(45,'D','D'),(46,'A','（1011011）2'),(46,'B','（142）8'),(46,'C','（62）16'),(46,'D','（97）10'),(47,'A','对象、消息'),(47,'B','继承、多态'),(47,'C','类、封装'),(47,'D','过程调用'),(48,'A','A'),(48,'B','B'),(48,'C','C'),(48,'D','D'),(49,'A','x[9]为0'),(49,'B','x[9]未定义'),(49,'C','x[10]为0'),(49,'D','x[0]为空'),(50,'A','A'),(50,'B','B'),(50,'C','C'),(50,'D','D'),(51,'A','198.0'),(51,'B','-198.0'),(51,'C','58.0'),(51,'D','-58.0'),(52,'A','A'),(52,'B','B'),(52,'C','C'),(52,'D','D'),(53,'A','FC-SAN存储'),(53,'B','IP-SAN存储'),(53,'C','本地硬盘'),(53,'D','本地内存盘'),(54,'A','应用按需分配资源'),(54,'B','广泛兼容各种软硬件'),(54,'C','自动化调度'),(54,'D','丰富的运维管理'),(54,'E','testE'),(54,'F','testF'),(55,'A','对'),(55,'B','错'),(56,'A','新建'),(56,'B','运行'),(56,'C','就绪'),(56,'D','死亡'),(56,'E','testE'),(57,'A','Q→（P∧Q）'),(57,'B','P→（P∧Q）'),(57,'C','（P∧Q）→P '),(57,'D','（P∨Q）→Q'),(58,'A','short'),(58,'B','long'),(58,'C','int'),(58,'D','byte'),(59,'A','类型定义机制'),(59,'B','数据封装机制'),(59,'C','类型定义机制和数据封装机制'),(59,'D','上述都不对'),(60,'A','先声明对象，然后才能使用对象'),(60,'B','先声明对象，喂对象分配内存空间，对对象初始化，然后才能使用对象'),(60,'C','先声明对象，喂对象分配内存空间，然后才能使用对象'),(60,'D','上述说法都对'),(61,'A','用基本数据类型作为参数'),(61,'B','用对象作为参数'),(61,'C','A和B都对'),(61,'D','A和B都不对'),(62,'A','一个子类可以有多个父类，一个父类也可以有多个子类'),(62,'B','一个子类可以有多个父类，但一个父类只可以有一个子类'),(62,'C','一个子类可以有一个父类，但一个父类可以有多个子类'),(62,'D','上述说法都不对'),(63,'A','安全性'),(63,'B','多线性'),(63,'C','跨平台'),(63,'D','可移植'),(64,'A','每次读入的字节数不同'),(64,'B','前者带有缓冲，后者没有'),(64,'C','前者是字符读写，后者是字节读写'),(64,'D','二者没有区别，可以互换使用'),(65,'A','default String s;'),(65,'B','public final static native int w()'),(65,'C','abstract double d;'),(65,'D','abstract final double hyperbolicCosine()'),(66,'A','class HasStatic {}'),(66,'B','pravite static int x=100;'),(66,'C','public static void main(String args[]){}'),(66,'D','HasStatic hs1=new HasStatic();'),(67,'A','int'),(67,'B','float'),(67,'C','double'),(67,'D','void'),(68,'A','start()'),(68,'B','init()'),(68,'C','run()'),(68,'D','synchronized()'),(69,'A','const'),(69,'B','double'),(69,'C','hello'),(69,'D','BigMeaninglessName'),(70,'A','transient'),(70,'B','static'),(70,'C','serialize'),(70,'D','synchronized'),(71,'A','static'),(71,'B','package'),(71,'C','private'),(71,'D','public'),(72,'A','java EE'),(72,'B','java Card'),(72,'C','java ME'),(72,'D','java HE'),(72,'E','testE'),(72,'F','java HE'),(73,'A','boolean = 1;'),(73,'B','boolean a=(9>=10);'),(73,'C','boolean a=\"真\"；'),(73,'D','boolean a ==false;'),(74,'A','STRING'),(74,'B','x3x;'),(74,'C','void'),(74,'D','de$f'),(75,'A','31.0'),(75,'B','0.0'),(75,'C','1.0'),(75,'D','2.0'),(76,'A','i++;'),(76,'B','i>5;'),(76,'C','bEqual = str.equals(\"q\");'),(76,'D','count ==i;'),(77,'A','<%--与--%>>'),(77,'B','/'),(77,'C','/**与**/'),(77,'D','<!--与-->'),(78,'A','Session'),(78,'B','application'),(78,'C','pageContext'),(78,'D','cookie'),(79,'A','short'),(79,'B','Boolean'),(79,'C','Double'),(79,'D','float'),(80,'A','数据组是一种对象'),(80,'B','数组属于一种原生类'),(80,'C','int number=[]={31,23,33,43,35,63}'),(80,'D','数组的大小可以任意改变'),(81,'A','private'),(81,'B','public'),(81,'C','protected'),(81,'D','static'),(82,'A','在类方法中可用this来调用本类的类方法'),(82,'B','在类方法中调用本类的类方法时可直接调用'),(82,'C','在类方法中只能调用本类的类方法'),(82,'D','在类方法中绝对不能调用实例方法'),(83,'A','new'),(83,'B','$Usdollars'),(83,'C','1234.0'),(83,'D','car.taxi'),(84,'A','void methods();'),(84,'B','public double methods();'),(84,'C','public final double methods();'),(84,'D','static void methods(double d1):'),(85,'A','Error'),(85,'B','Throwable'),(85,'C','Exception'),(85,'D','RuntimeException'),(86,'A','默认构造器有和它所在类相同的访问修饰词'),(86,'B','默认构造器可调用其他父类的无参构造器'),(86,'C','如果一个雷没有无参构造器，编译器会为它创建一个默认构造器'),(86,'D','只有当一个雷没有任何构造器时，编译器会为它创建一个默认构造器'),(87,'A','final void methods(){}'),(87,'B','void final methods(){}'),(87,'C','static void methods(){}'),(87,'D','static final void methods(){}'),(88,'A','long number = 345L;'),(88,'B','long number = 0345;'),(88,'C','long number = 0345L;'),(88,'D','long number = 0x345L;'),(89,'A','start()'),(89,'B','stop()'),(89,'C','init()'),(89,'D','paint()'),(90,'A','x[9]为0'),(90,'B','x[9]未定义'),(90,'C','x[10]为0'),(90,'D','x[0]为空'),(91,'A','对象、消息'),(91,'B','继承、多态'),(91,'C','类、封装'),(91,'D','过程调用'),(92,'A','（1011011）2'),(92,'B','（142）8'),(92,'C','（62）16'),(92,'D','（97）10'),(93,'A','23.5'),(93,'B','23.625'),(93,'C','23.75'),(93,'D','23.5125'),(94,'A','198.0'),(94,'B','-198.0'),(94,'C','58.0'),(94,'D','-58.0'),(95,'A','每秒处理百万个字符'),(95,'B','每分钟处理百万个字符'),(95,'C','每秒执行百万条指令'),(95,'D','每分钟执行百万条指令'),(96,'A','start()'),(96,'B','stop()'),(96,'C','init()'),(96,'D','paint()'),(97,'A','final void methods(){}'),(97,'B','void final methods(){}'),(97,'C','static void methods(){}'),(97,'D','static final void methods(){}'),(98,'A','A'),(98,'B','B'),(98,'C','C'),(98,'D','D'),(99,'A','23.5'),(99,'B','23.625'),(99,'C','23.75'),(99,'D','23.5125'),(100,'A','A'),(100,'B','B'),(100,'C','C'),(101,'A','void methods();'),(101,'B','public double methods();'),(101,'C','public final double methods();'),(101,'D','static void methods(double d1):'),(101,'E','testE'),(102,'A','A'),(102,'B','B'),(102,'C','C'),(103,'A','FC-SAN存储'),(103,'B','IP-SAN存储'),(103,'C','本地硬盘'),(103,'D','本地内存盘'),(104,'A','应用按需分配资源'),(104,'B','广泛兼容各种软硬件'),(104,'C','自动化调度'),(104,'D','丰富的运维管理'),(104,'E','testE'),(104,'F','testF'),(105,'A','对'),(105,'B','错'),(106,'A','新建'),(106,'B','运行'),(106,'C','就绪'),(106,'D','死亡'),(106,'E','testE'),(107,'A','Q→（P∧Q）'),(107,'B','P→（P∧Q）'),(107,'C','（P∧Q）→P '),(107,'D','（P∨Q）→Q'),(108,'A','short'),(108,'B','long'),(108,'C','int'),(108,'D','byte'),(109,'A','类型定义机制'),(109,'B','数据封装机制'),(109,'C','类型定义机制和数据封装机制'),(109,'D','上述都不对'),(110,'A','先声明对象，然后才能使用对象'),(110,'B','先声明对象，喂对象分配内存空间，对对象初始化，然后才能使用对象'),(110,'C','先声明对象，喂对象分配内存空间，然后才能使用对象'),(110,'D','上述说法都对'),(111,'A','用基本数据类型作为参数'),(111,'B','用对象作为参数'),(111,'C','A和B都对'),(111,'D','A和B都不对'),(112,'A','一个子类可以有多个父类，一个父类也可以有多个子类'),(112,'B','一个子类可以有多个父类，但一个父类只可以有一个子类'),(112,'C','一个子类可以有一个父类，但一个父类可以有多个子类'),(112,'D','上述说法都不对'),(113,'A','安全性'),(113,'B','多线性'),(113,'C','跨平台'),(113,'D','可移植'),(114,'A','每次读入的字节数不同'),(114,'B','前者带有缓冲，后者没有'),(114,'C','前者是字符读写，后者是字节读写'),(114,'D','二者没有区别，可以互换使用'),(115,'A','default String s;'),(115,'B','public final static native int w()'),(115,'C','abstract double d;'),(115,'D','abstract final double hyperbolicCosine()'),(116,'A','class HasStatic {}'),(116,'B','pravite static int x=100;'),(116,'C','public static void main(String args[]){}'),(116,'D','HasStatic hs1=new HasStatic();'),(117,'A','int'),(117,'B','float'),(117,'C','double'),(117,'D','void'),(118,'A','start()'),(118,'B','init()'),(118,'C','run()'),(118,'D','synchronized()'),(119,'A','const'),(119,'B','double'),(119,'C','hello'),(119,'D','BigMeaninglessName'),(120,'A','transient'),(120,'B','static'),(120,'C','serialize'),(120,'D','synchronized'),(121,'A','static'),(121,'B','package'),(121,'C','private'),(121,'D','public'),(122,'A','java EE'),(122,'B','java Card'),(122,'C','java ME'),(122,'D','java HE'),(122,'E','testE'),(122,'F','java HE'),(123,'A','boolean = 1;'),(123,'B','boolean a=(9>=10);'),(123,'C','boolean a=\"真\"；'),(123,'D','boolean a ==false;'),(124,'A','STRING'),(124,'B','x3x;'),(124,'C','void'),(124,'D','de$f'),(125,'A','31.0'),(125,'B','0.0'),(125,'C','1.0'),(125,'D','2.0'),(126,'A','i++;'),(126,'B','i>5;'),(126,'C','bEqual = str.equals(\"q\");'),(126,'D','count ==i;'),(127,'A','<%--与--%>>'),(127,'B','/'),(127,'C','/**与**/'),(127,'D','<!--与-->'),(128,'A','Session'),(128,'B','application'),(128,'C','pageContext'),(128,'D','cookie'),(129,'A','short'),(129,'B','Boolean'),(129,'C','Double'),(129,'D','float'),(130,'A','数据组是一种对象'),(130,'B','数组属于一种原生类'),(130,'C','int number=[]={31,23,33,43,35,63}'),(130,'D','数组的大小可以任意改变'),(131,'A','private'),(131,'B','public'),(131,'C','protected'),(131,'D','static'),(132,'A','在类方法中可用this来调用本类的类方法'),(132,'B','在类方法中调用本类的类方法时可直接调用'),(132,'C','在类方法中只能调用本类的类方法'),(132,'D','在类方法中绝对不能调用实例方法'),(133,'A','new'),(133,'B','$Usdollars'),(133,'C','1234.0'),(133,'D','car.taxi'),(134,'A','void methods();'),(134,'B','public double methods();'),(134,'C','public final double methods();'),(134,'D','static void methods(double d1):'),(135,'A','Error'),(135,'B','Throwable'),(135,'C','Exception'),(135,'D','RuntimeException'),(136,'A','默认构造器有和它所在类相同的访问修饰词'),(136,'B','默认构造器可调用其他父类的无参构造器'),(136,'C','如果一个雷没有无参构造器，编译器会为它创建一个默认构造器'),(136,'D','只有当一个雷没有任何构造器时，编译器会为它创建一个默认构造器'),(137,'A','final void methods(){}'),(137,'B','void final methods(){}'),(137,'C','static void methods(){}'),(137,'D','static final void methods(){}'),(138,'A','long number = 345L;'),(138,'B','long number = 0345;'),(138,'C','long number = 0345L;'),(138,'D','long number = 0x345L;'),(139,'A','start()'),(139,'B','stop()'),(139,'C','init()'),(139,'D','paint()'),(140,'A','x[9]为0'),(140,'B','x[9]未定义'),(140,'C','x[10]为0'),(140,'D','x[0]为空'),(141,'A','对象、消息'),(141,'B','继承、多态'),(141,'C','类、封装'),(141,'D','过程调用'),(142,'A','（1011011）2'),(142,'B','（142）8'),(142,'C','（62）16'),(142,'D','（97）10'),(143,'A','23.5'),(143,'B','23.625'),(143,'C','23.75'),(143,'D','23.5125'),(144,'A','198.0'),(144,'B','-198.0'),(144,'C','58.0'),(144,'D','-58.0'),(145,'A','每秒处理百万个字符'),(145,'B','每分钟处理百万个字符'),(145,'C','每秒执行百万条指令'),(145,'D','每分钟执行百万条指令'),(146,'A','（1011011）2'),(146,'B','（142）8'),(146,'C','（62）16'),(146,'D','（97）10'),(147,'A','long number = 345L;'),(147,'B','long number = 0345;'),(147,'C','long number = 0345L;'),(147,'D','long number = 0x345L;'),(148,'A','A'),(148,'B','B'),(148,'C','C'),(148,'D','D'),(149,'A','FC-SAN存储'),(149,'B','IP-SAN存储'),(149,'C','本地硬盘'),(149,'D','本地内存盘'),(150,'A','应用按需分配资源'),(150,'B','广泛兼容各种软硬件'),(150,'C','自动化调度'),(150,'D','丰富的运维管理'),(150,'E','testE'),(150,'F','testF'),(151,'A','对'),(151,'B','错'),(152,'A','新建'),(152,'B','运行'),(152,'C','就绪'),(152,'D','死亡'),(152,'E','testE'),(153,'A','Q→（P∧Q）'),(153,'B','P→（P∧Q）'),(153,'C','（P∧Q）→P '),(153,'D','（P∨Q）→Q'),(154,'A','short'),(154,'B','long'),(154,'C','int'),(154,'D','byte'),(155,'A','类型定义机制'),(155,'B','数据封装机制'),(155,'C','类型定义机制和数据封装机制'),(155,'D','上述都不对'),(156,'A','先声明对象，然后才能使用对象'),(156,'B','先声明对象，喂对象分配内存空间，对对象初始化，然后才能使用对象'),(156,'C','先声明对象，喂对象分配内存空间，然后才能使用对象'),(156,'D','上述说法都对'),(157,'A','用基本数据类型作为参数'),(157,'B','用对象作为参数'),(157,'C','A和B都对'),(157,'D','A和B都不对'),(158,'A','一个子类可以有多个父类，一个父类也可以有多个子类'),(158,'B','一个子类可以有多个父类，但一个父类只可以有一个子类'),(158,'C','一个子类可以有一个父类，但一个父类可以有多个子类'),(158,'D','上述说法都不对'),(159,'A','安全性'),(159,'B','多线性'),(159,'C','跨平台'),(159,'D','可移植'),(160,'A','每次读入的字节数不同'),(160,'B','前者带有缓冲，后者没有'),(160,'C','前者是字符读写，后者是字节读写'),(160,'D','二者没有区别，可以互换使用'),(161,'A','default String s;'),(161,'B','public final static native int w()'),(161,'C','abstract double d;'),(161,'D','abstract final double hyperbolicCosine()'),(162,'A','class HasStatic {}'),(162,'B','pravite static int x=100;'),(162,'C','public static void main(String args[]){}'),(162,'D','HasStatic hs1=new HasStatic();'),(163,'A','int'),(163,'B','float'),(163,'C','double'),(163,'D','void'),(164,'A','start()'),(164,'B','init()'),(164,'C','run()'),(164,'D','synchronized()'),(165,'A','const'),(165,'B','double'),(165,'C','hello'),(165,'D','BigMeaninglessName'),(166,'A','transient'),(166,'B','static'),(166,'C','serialize'),(166,'D','synchronized'),(167,'A','static'),(167,'B','package'),(167,'C','private'),(167,'D','public'),(168,'A','java EE'),(168,'B','java Card'),(168,'C','java ME'),(168,'D','java HE'),(168,'E','testE'),(168,'F','java HE'),(169,'A','boolean = 1;'),(169,'B','boolean a=(9>=10);'),(169,'C','boolean a=\"真\"；'),(169,'D','boolean a ==false;'),(170,'A','STRING'),(170,'B','x3x;'),(170,'C','void'),(170,'D','de$f'),(171,'A','31.0'),(171,'B','0.0'),(171,'C','1.0'),(171,'D','2.0'),(172,'A','i++;'),(172,'B','i>5;'),(172,'C','bEqual = str.equals(\"q\");'),(172,'D','count ==i;'),(173,'A','<%--与--%>>'),(173,'B','/'),(173,'C','/**与**/'),(173,'D','<!--与-->'),(174,'A','Session'),(174,'B','application'),(174,'C','pageContext'),(174,'D','cookie'),(175,'A','short'),(175,'B','Boolean'),(175,'C','Double'),(175,'D','float'),(176,'A','数据组是一种对象'),(176,'B','数组属于一种原生类'),(176,'C','int number=[]={31,23,33,43,35,63}'),(176,'D','数组的大小可以任意改变'),(177,'A','private'),(177,'B','public'),(177,'C','protected'),(177,'D','static'),(178,'A','在类方法中可用this来调用本类的类方法'),(178,'B','在类方法中调用本类的类方法时可直接调用'),(178,'C','在类方法中只能调用本类的类方法'),(178,'D','在类方法中绝对不能调用实例方法'),(179,'A','new'),(179,'B','$Usdollars'),(179,'C','1234.0'),(179,'D','car.taxi'),(180,'A','void methods();'),(180,'B','public double methods();'),(180,'C','public final double methods();'),(180,'D','static void methods(double d1):'),(181,'A','Error'),(181,'B','Throwable'),(181,'C','Exception'),(181,'D','RuntimeException'),(182,'A','默认构造器有和它所在类相同的访问修饰词'),(182,'B','默认构造器可调用其他父类的无参构造器'),(182,'C','如果一个雷没有无参构造器，编译器会为它创建一个默认构造器'),(182,'D','只有当一个雷没有任何构造器时，编译器会为它创建一个默认构造器'),(183,'A','final void methods(){}'),(183,'B','void final methods(){}'),(183,'C','static void methods(){}'),(183,'D','static final void methods(){}'),(184,'A','long number = 345L;'),(184,'B','long number = 0345;'),(184,'C','long number = 0345L;'),(184,'D','long number = 0x345L;'),(185,'A','start()'),(185,'B','stop()'),(185,'C','init()'),(185,'D','paint()'),(186,'A','x[9]为0'),(186,'B','x[9]未定义'),(186,'C','x[10]为0'),(186,'D','x[0]为空'),(187,'A','对象、消息'),(187,'B','继承、多态'),(187,'C','类、封装'),(187,'D','过程调用'),(188,'A','（1011011）2'),(188,'B','（142）8'),(188,'C','（62）16'),(188,'D','（97）10'),(189,'A','23.5'),(189,'B','23.625'),(189,'C','23.75'),(189,'D','23.5125'),(190,'A','198.0'),(190,'B','-198.0'),(190,'C','58.0'),(190,'D','-58.0'),(191,'A','每秒处理百万个字符'),(191,'B','每分钟处理百万个字符'),(191,'C','每秒执行百万条指令'),(191,'D','每分钟执行百万条指令'),(192,'A','Error'),(192,'B','Throwable'),(192,'C','Exception'),(192,'D','RuntimeException'),(193,'A','a'),(193,'B','b'),(193,'C','c'),(193,'D','d'),(194,'A','FC-SAN存储'),(194,'B','IP-SAN存储'),(194,'C','本地硬盘'),(194,'D','本地内存盘'),(195,'A','应用按需分配资源'),(195,'B','广泛兼容各种软硬件'),(195,'C','自动化调度'),(195,'D','丰富的运维管理'),(195,'E','testE'),(195,'F','testF'),(196,'A','对'),(196,'B','错'),(197,'A','新建'),(197,'B','运行'),(197,'C','就绪'),(197,'D','死亡'),(197,'E','testE'),(198,'A','Q→（P∧Q）'),(198,'B','P→（P∧Q）'),(198,'C','（P∧Q）→P '),(198,'D','（P∨Q）→Q'),(199,'A','short'),(199,'B','long'),(199,'C','int'),(199,'D','byte'),(200,'A','类型定义机制'),(200,'B','数据封装机制'),(200,'C','类型定义机制和数据封装机制'),(200,'D','上述都不对'),(201,'A','先声明对象，然后才能使用对象'),(201,'B','先声明对象，喂对象分配内存空间，对对象初始化，然后才能使用对象'),(201,'C','先声明对象，喂对象分配内存空间，然后才能使用对象'),(201,'D','上述说法都对'),(202,'A','用基本数据类型作为参数'),(202,'B','用对象作为参数'),(202,'C','A和B都对'),(202,'D','A和B都不对'),(203,'A','一个子类可以有多个父类，一个父类也可以有多个子类'),(203,'B','一个子类可以有多个父类，但一个父类只可以有一个子类'),(203,'C','一个子类可以有一个父类，但一个父类可以有多个子类'),(203,'D','上述说法都不对'),(204,'A','安全性'),(204,'B','多线性'),(204,'C','跨平台'),(204,'D','可移植'),(205,'A','每次读入的字节数不同'),(205,'B','前者带有缓冲，后者没有'),(205,'C','前者是字符读写，后者是字节读写'),(205,'D','二者没有区别，可以互换使用'),(206,'A','default String s;'),(206,'B','public final static native int w()'),(206,'C','abstract double d;'),(206,'D','abstract final double hyperbolicCosine()'),(207,'A','class HasStatic {}'),(207,'B','pravite static int x=100;'),(207,'C','public static void main(String args[]){}'),(207,'D','HasStatic hs1=new HasStatic();'),(208,'A','int'),(208,'B','float'),(208,'C','double'),(208,'D','void'),(209,'A','start()'),(209,'B','init()'),(209,'C','run()'),(209,'D','synchronized()'),(210,'A','const'),(210,'B','double'),(210,'C','hello'),(210,'D','BigMeaninglessName'),(211,'A','transient'),(211,'B','static'),(211,'C','serialize'),(211,'D','synchronized'),(212,'A','static'),(212,'B','package'),(212,'C','private'),(212,'D','public'),(213,'A','java EE'),(213,'B','java Card'),(213,'C','java ME'),(213,'D','java HE'),(213,'E','testE'),(213,'F','java HE'),(214,'A','boolean = 1;'),(214,'B','boolean a=(9>=10);'),(214,'C','boolean a=\"真\"；'),(214,'D','boolean a ==false;'),(215,'A','STRING'),(215,'B','x3x;'),(215,'C','void'),(215,'D','de$f'),(216,'A','31.0'),(216,'B','0.0'),(216,'C','1.0'),(216,'D','2.0'),(217,'A','i++;'),(217,'B','i>5;'),(217,'C','bEqual = str.equals(\"q\");'),(217,'D','count ==i;'),(218,'A','<%--与--%>>'),(218,'B','/'),(218,'C','/**与**/'),(218,'D','<!--与-->'),(219,'A','Session'),(219,'B','application'),(219,'C','pageContext'),(219,'D','cookie'),(220,'A','short'),(220,'B','Boolean'),(220,'C','Double'),(220,'D','float'),(221,'A','数据组是一种对象'),(221,'B','数组属于一种原生类'),(221,'C','int number=[]={31,23,33,43,35,63}'),(221,'D','数组的大小可以任意改变'),(222,'A','private'),(222,'B','public'),(222,'C','protected'),(222,'D','static'),(223,'A','在类方法中可用this来调用本类的类方法'),(223,'B','在类方法中调用本类的类方法时可直接调用'),(223,'C','在类方法中只能调用本类的类方法'),(223,'D','在类方法中绝对不能调用实例方法'),(224,'A','new'),(224,'B','$Usdollars'),(224,'C','1234.0'),(224,'D','car.taxi'),(225,'A','void methods();'),(225,'B','public double methods();'),(225,'C','public final double methods();'),(225,'D','static void methods(double d1):'),(226,'A','Error'),(226,'B','Throwable'),(226,'C','Exception'),(226,'D','RuntimeException'),(227,'A','默认构造器有和它所在类相同的访问修饰词'),(227,'B','默认构造器可调用其他父类的无参构造器'),(227,'C','如果一个雷没有无参构造器，编译器会为它创建一个默认构造器'),(227,'D','只有当一个雷没有任何构造器时，编译器会为它创建一个默认构造器'),(228,'A','final void methods(){}'),(228,'B','void final methods(){}'),(228,'C','static void methods(){}'),(228,'D','static final void methods(){}'),(229,'A','long number = 345L;'),(229,'B','long number = 0345;'),(229,'C','long number = 0345L;'),(229,'D','long number = 0x345L;'),(230,'A','start()'),(230,'B','stop()'),(230,'C','init()'),(230,'D','paint()'),(231,'A','x[9]为0'),(231,'B','x[9]未定义'),(231,'C','x[10]为0'),(231,'D','x[0]为空'),(232,'A','对象、消息'),(232,'B','继承、多态'),(232,'C','类、封装'),(232,'D','过程调用'),(233,'A','（1011011）2'),(233,'B','（142）8'),(233,'C','（62）16'),(233,'D','（97）10'),(234,'A','23.5'),(234,'B','23.625'),(234,'C','23.75'),(234,'D','23.5125'),(235,'A','198.0'),(235,'B','-198.0'),(235,'C','58.0'),(235,'D','-58.0'),(236,'A','每秒处理百万个字符'),(236,'B','每分钟处理百万个字符'),(236,'C','每秒执行百万条指令'),(236,'D','每分钟执行百万条指令');

/*Table structure for table `subject` */

DROP TABLE IF EXISTS `subject`;

CREATE TABLE `subject` (
  `id` int NOT NULL AUTO_INCREMENT,
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '科目名',
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP,
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='科目表';

/*Data for the table `subject` */

insert  into `subject`(`id`,`name`,`createtime`,`updatetime`) values (1,'计算机网络','2020-04-26 19:38:12','2020-04-26 19:38:12'),(2,'数据结构','2020-04-26 20:54:42','2020-04-26 20:54:42'),(3,'大学英语','2020-04-26 20:54:51','2020-04-26 20:54:51'),(4,'离散数学','2020-04-27 17:48:40','2020-04-27 17:48:40'),(5,'j2ee','2020-04-27 19:13:01','2020-04-27 19:13:01'),(6,'大学物理','2020-04-27 21:25:22','2020-04-27 21:25:22'),(7,'大学语文','2020-04-27 21:58:56','2020-04-27 21:58:56');

/*Table structure for table `sys_enum` */

DROP TABLE IF EXISTS `sys_enum`;

CREATE TABLE `sys_enum` (
  `id` int NOT NULL AUTO_INCREMENT,
  `catalog` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '模块名',
  `type` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '枚举类型',
  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '枚举名称',
  `value` int NOT NULL COMMENT '整型值',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '说明',
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin COMMENT='枚举表';

/*Data for the table `sys_enum` */

insert  into `sys_enum`(`id`,`catalog`,`type`,`name`,`value`,`description`,`updatetime`,`createtime`) values (15,'TOPIC','TYPE','判断题',0,'判断题','2020-03-28 21:59:48','2020-03-12 11:32:04'),(16,'TOPIC','TYPE','单选题',1,'单选题','2020-03-28 21:59:48','2020-03-12 11:32:57'),(17,'TOPIC','DIFFICULT','易',0,'简单','2020-03-12 11:33:41','2020-03-12 11:33:41'),(18,'TOPIC','DIFFICULT','中',1,'中单','2020-03-12 11:39:27','2020-03-12 11:39:27'),(19,'TOPIC','DIFFICULT','难',2,'难','2020-03-12 11:39:51','2020-03-12 11:39:48'),(20,'TOPIC','TYPE','多选题',2,'多选题','2020-03-28 21:59:48','2020-03-28 21:59:48');

/*Table structure for table `topic` */

DROP TABLE IF EXISTS `topic`;

CREATE TABLE `topic` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '题目id',
  `file_id` int DEFAULT NULL COMMENT '文件id',
  `type` int NOT NULL COMMENT '题目类型',
  `difficult` int NOT NULL COMMENT '难度等级',
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '题目描述',
  `correctkey` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '正确答案',
  `topicmark` double DEFAULT NULL COMMENT '分值',
  `analysis` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '题目分析',
  `subject_id` int NOT NULL COMMENT '学科号',
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '最后更新时间',
  `flag` int DEFAULT '1' COMMENT '判断题目可不可用',
  `user_id` int DEFAULT NULL COMMENT '上传用户的Id',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=237 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

/*Data for the table `topic` */

insert  into `topic`(`id`,`file_id`,`type`,`difficult`,`description`,`correctkey`,`topicmark`,`analysis`,`subject_id`,`createtime`,`updatetime`,`flag`,`user_id`) values (1,1,1,2,'管理员在FusionCompute中．为主机添加存储接口．实现主机与存储设备对接以下哪个存储类型需要添加存储接口？','B',20,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(2,1,2,2,'以下哪些是FusionSphere的特点？','ABCD',20,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(3,1,0,2,'在华为服务器虚拟化解决方案中，每台虚拟机的虚拟网卡连接在虚拟交换机的端口上，为了方便用户同时对多个端口进行配置和管理，将具有相同网络属性的端口划分到同一个端口组下？','A',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(4,1,2,2,'FileInputStream与FileOutputStream类用读、写字节流','ABCD',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(5,1,1,2,'下列命题公式为永真蕴含式的是（ ）。','C',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(6,1,1,2,'整型数据类型中，需要内存空间最少的是（）。','D',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(7,1,1,2,'Java类可以作为（）。','C',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(8,1,1,2,'在创建对象时必须（）。','B',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(9,1,1,2,'在调用方法时，若要使方法改变实参的值，可以（）。','B',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(10,1,1,2,'Java中（）。','C',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(11,1,1,2,'Java语言具有许多优点和特点，那个反映了Java程序并行机制的特点？（）','B',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(12,1,1,2,'Character流与Byte流的区别是（）。','C',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(13,1,1,2,'以下声明合法的是（）。','D',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(14,1,1,2,'关于一下程序代码的说明正确的是（）。','D',15,'',1,'2020-04-26 19:38:56','2020-04-26 19:38:56',1,1),(15,1,1,2,'Java application中的主类需包含main方法，main方法的返回类型是什么？（）','D',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(16,1,1,2,'以下哪个方法用于定义线程的执行体？（）','C',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(17,1,1,2,'以下标识符中哪项是不合法的（）。','A',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(18,1,1,2,'以下哪个关键字可以用来为对象加互斥锁？（）','D',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(19,1,1,1,'若需要定义一个类域或类方法，应使用哪种修饰符？（）','C',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(20,1,1,2,'Java所定义的版本不包括：（）？','D',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(21,1,1,2,'为一个boolean类型变量赋值时，可以使用（）方式','B',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(22,1,1,2,'以下（）不是合法的标识符','C',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(23,1,1,2,'表达式（11+3*8）/4%3的值是（）','D',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(24,1,1,2,'（）表达式不可以作为循环条件','A',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(25,1,2,2,'下列属于JSP中注释的有（）','AD',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(26,1,2,2,'下列是JSP作用域的通信对象的有（）','ABC',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(27,1,2,2,'下面哪个不是java的简单类型数据类型？','BC',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(28,1,2,2,'下列说法错误的有（）','BCD',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(29,1,2,2,'不能用来修饰interface的有（）','ACD',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(30,1,2,0,'下列说法错误的有（）','ACD',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(31,1,2,2,'下列标识符不合法的有（）','ACD',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',1,1),(32,1,2,2,'在接口中一下哪条定义是正确的？','AB',15,'',1,'2020-04-26 19:38:57','2020-04-26 19:38:57',0,1),(33,1,2,0,'以下哪四个能使用throw抛出？','ABCD',15,'',1,'2020-04-26 19:38:58','2020-04-26 19:38:58',0,1),(34,1,2,2,'下面哪几种描述是正确的？','ABD',15,'',1,'2020-04-26 19:38:58','2020-04-26 19:38:58',1,1),(35,1,2,2,'哪两种声明防止方法覆盖？','AD',15,'',1,'2020-04-26 19:38:58','2020-04-26 19:38:58',0,1),(36,1,1,2,'哪个是将一个十六进制值赋值给一个long型变量？（）','D',15,'',1,'2020-04-26 19:38:58','2020-04-26 19:38:58',0,1),(37,1,1,2,'在Java applet程序中，用户自定义的Apllet子类常常覆盖父类的（）方法来完成applet界面的初始化工作。','D',15,'',1,'2020-04-26 19:38:58','2020-04-26 19:38:58',0,1),(38,1,1,2,'执行完以下代码int[] x=new ine[10];后，以下哪项说明是正确的（）','A',15,'',1,'2020-04-26 19:38:58','2020-04-26 19:38:58',0,1),(39,1,1,2,'下述概念中不属于面向对象方法的是（）','D',15,'',1,'2020-04-26 19:38:58','2020-04-26 19:38:58',0,1),(40,1,1,2,'下列数中最小的数是（）','A',15,'',1,'2020-04-26 19:38:58','2020-04-26 19:38:58',0,1),(41,1,1,2,'若二进制数为0101111.101，则该数的十进制表示为（）。','B',15,'',1,'2020-04-26 19:38:58','2020-04-26 19:38:58',0,1),(42,1,1,2,'11000110为二进制补码，该数的真值为（）。','D',15,'',1,'2020-04-26 19:38:58','2020-04-26 19:38:58',0,1),(43,1,1,2,'MIPS用来描述计算机的运算速度，含义是（）','C',15,'',1,'2020-04-26 19:38:58','2020-04-26 19:38:58',1,1),(44,1,1,1,'下列数中最小的数是（）','A',15,'',1,'2020-04-26 19:39:22','2020-04-26 19:39:22',0,1),(45,NULL,1,0,'test新增','B',10,'TEST',1,'2020-04-26 19:40:07','2020-04-26 19:40:07',0,1),(46,1,1,2,'下列数中最小的数是（）','B',15,'',1,'2020-04-27 19:26:31','2020-04-27 19:26:31',0,1),(47,1,1,0,'下述概念中不属于面向对象方法的是（）','C',15,'',1,'2020-04-27 19:27:43','2020-04-27 19:27:43',0,1),(49,1,1,1,'执行完以下代码int[] x=new ine[10];后，以下哪项说明是正确的（）','B',10,'',1,'2020-04-27 19:30:46','2020-04-27 19:30:46',0,1),(50,NULL,1,1,'test','D',10,'TEST',3,'2020-04-27 19:31:15','2020-04-27 19:31:15',0,1),(51,1,1,1,'11000110为二进制补码，该数的真值为（）。','C',15,'',1,'2020-04-27 19:33:08','2020-04-27 19:33:08',0,1),(52,NULL,1,0,'test','D',10,'TEST',1,'2020-04-27 19:33:37','2020-04-27 19:33:37',0,1),(96,1,1,1,'在Java applet程序中，用户自定义的Apllet子类常常覆盖父类的（）方法来完成applet界面的初始化工作。','C',10,'',1,'2020-04-27 20:59:07','2020-04-27 20:59:07',0,1),(97,1,2,1,'哪两种声明防止方法覆盖？','AC',10,'',1,'2020-04-27 21:07:07','2020-04-27 21:07:07',0,1),(99,1,1,0,'若二进制数为0101111.101，则该数的十进制表示为（）。','C',10,'TEST',1,'2020-04-27 21:13:05','2020-04-27 21:13:05',0,1),(100,NULL,1,1,'test','C',10,'123',3,'2020-04-27 21:13:31','2020-04-27 21:13:31',0,1),(101,1,2,2,'在接口中一下哪条定义是正确的？','A',10,'',1,'2020-04-27 21:21:07','2020-04-27 21:21:07',0,1),(146,1,1,2,'下列数中最小的数是（）','B',10,'',2,'2020-04-27 21:44:04','2020-04-27 21:44:04',0,1),(147,1,2,1,'哪个是将一个十六进制值赋值给一个long型变量？（）','CD',10,'',2,'2020-04-27 21:47:27','2020-04-27 21:47:27',0,1),(148,NULL,1,1,'TEST','A',10,'',3,'2020-04-27 21:47:54','2020-04-27 21:47:54',0,1),(192,1,2,2,'以下哪四个能使用throw抛出？','ABC',10,'',5,'2020-04-27 21:55:45','2020-04-27 21:55:45',1,1),(193,NULL,1,2,'TEST','D',10,'',5,'2020-04-27 21:56:17','2020-04-27 21:56:17',1,1),(194,7,1,2,'管理员在FusionCompute中．为主机添加存储接口．实现主机与存储设备对接以下哪个存储类型需要添加存储接口？','B',20,'',5,'2020-04-27 21:57:06','2020-04-27 21:57:06',1,1),(195,7,2,2,'以下哪些是FusionSphere的特点？','ABCD',20,'',5,'2020-04-27 21:57:06','2020-04-27 21:57:06',1,1),(196,7,0,2,'在华为服务器虚拟化解决方案中，每台虚拟机的虚拟网卡连接在虚拟交换机的端口上，为了方便用户同时对多个端口进行配置和管理，将具有相同网络属性的端口划分到同一个端口组下？','A',15,'',5,'2020-04-27 21:57:06','2020-04-27 21:57:06',1,1),(197,7,2,2,'FileInputStream与FileOutputStream类用读、写字节流','ABCD',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(198,7,1,2,'下列命题公式为永真蕴含式的是（ ）。','C',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(199,7,1,2,'整型数据类型中，需要内存空间最少的是（）。','D',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(200,7,1,2,'Java类可以作为（）。','C',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(201,7,1,2,'在创建对象时必须（）。','B',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(202,7,1,2,'在调用方法时，若要使方法改变实参的值，可以（）。','B',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(203,7,1,2,'Java中（）。','C',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(204,7,1,2,'Java语言具有许多优点和特点，那个反映了Java程序并行机制的特点？（）','B',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(205,7,1,2,'Character流与Byte流的区别是（）。','C',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(206,7,1,2,'以下声明合法的是（）。','D',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(207,7,1,2,'关于一下程序代码的说明正确的是（）。','D',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(208,7,1,2,'Java application中的主类需包含main方法，main方法的返回类型是什么？（）','D',15,'',5,'2020-04-27 21:57:07','2020-04-27 21:57:07',1,1),(209,7,1,2,'以下哪个方法用于定义线程的执行体？（）','C',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(210,7,1,2,'以下标识符中哪项是不合法的（）。','A',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(211,7,1,2,'以下哪个关键字可以用来为对象加互斥锁？（）','D',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(212,7,1,1,'若需要定义一个类域或类方法，应使用哪种修饰符？（）','C',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(213,7,1,2,'Java所定义的版本不包括：（）？','D',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(214,7,1,2,'为一个boolean类型变量赋值时，可以使用（）方式','B',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(215,7,1,2,'以下（）不是合法的标识符','C',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(216,7,1,2,'表达式（11+3*8）/4%3的值是（）','D',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(217,7,1,2,'（）表达式不可以作为循环条件','A',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(218,7,2,2,'下列属于JSP中注释的有（）','AD',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(219,7,2,2,'下列是JSP作用域的通信对象的有（）','ABC',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(220,7,2,2,'下面哪个不是java的简单类型数据类型？','BC',15,'',5,'2020-04-27 21:57:08','2020-04-27 21:57:08',1,1),(221,7,2,2,'下列说法错误的有（）','BCD',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(222,7,2,2,'不能用来修饰interface的有（）','ACD',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(223,7,2,0,'下列说法错误的有（）','ACD',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(224,7,2,2,'下列标识符不合法的有（）','ACD',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(225,7,2,2,'在接口中一下哪条定义是正确的？','AB',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(226,7,2,0,'以下哪四个能使用throw抛出？','ABCD',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(227,7,2,2,'下面哪几种描述是正确的？','ABD',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(228,7,2,2,'哪两种声明防止方法覆盖？','AD',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(229,7,1,2,'哪个是将一个十六进制值赋值给一个long型变量？（）','D',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(230,7,1,2,'在Java applet程序中，用户自定义的Apllet子类常常覆盖父类的（）方法来完成applet界面的初始化工作。','D',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(231,7,1,2,'执行完以下代码int[] x=new ine[10];后，以下哪项说明是正确的（）','A',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(232,7,1,2,'下述概念中不属于面向对象方法的是（）','D',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(233,7,1,2,'下列数中最小的数是（）','A',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(234,7,1,2,'若二进制数为0101111.101，则该数的十进制表示为（）。','B',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(235,7,1,2,'11000110为二进制补码，该数的真值为（）。','D',15,'',5,'2020-04-27 21:57:09','2020-04-27 21:57:09',1,1),(236,7,1,2,'MIPS用来描述计算机的运算速度，含义是（）','C',15,'',5,'2020-04-27 21:57:10','2020-04-27 21:57:10',1,1);

/*Table structure for table `upload_file` */

DROP TABLE IF EXISTS `upload_file`;

CREATE TABLE `upload_file` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT '文件id',
  `fileName` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '文件名',
  `filePath` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '上传文件路径',
  `user_id` int NOT NULL COMMENT '上传用户id',
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '最后更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

/*Data for the table `upload_file` */

insert  into `upload_file`(`id`,`fileName`,`filePath`,`user_id`,`createtime`,`updatetime`) values (1,'考试题目测试数据 20200426 193852.xlsx','files\\考试题目测试数据 20200426 193852.xlsx',1,'2020-04-26 19:38:49','2020-04-26 19:38:49'),(2,'考试题目测试数据 20200427 180929.xlsx','files\\考试题目测试数据 20200427 180929.xlsx',1,'2020-04-27 18:09:25','2020-04-27 18:09:25'),(3,'考试题目测试数据 20200427 193147.xlsx','files\\考试题目测试数据 20200427 193147.xlsx',1,'2020-04-27 19:31:43','2020-04-27 19:31:43'),(4,'考试题目测试数据 20200427 193404.xlsx','files\\考试题目测试数据 20200427 193404.xlsx',1,'2020-04-27 19:34:00','2020-04-27 19:34:00'),(5,'考试题目测试数据 20200427 212208.xlsx','files\\考试题目测试数据 20200427 212208.xlsx',1,'2020-04-27 21:22:08','2020-04-27 21:22:08'),(6,'考试题目测试数据 20200427 214819.xlsx','files\\考试题目测试数据 20200427 214819.xlsx',1,'2020-04-27 21:48:19','2020-04-27 21:48:19'),(7,'考试题目测试数据 20200427 215645.xlsx','files\\考试题目测试数据 20200427 215645.xlsx',1,'2020-04-27 21:56:45','2020-04-27 21:56:45');

/*Table structure for table `user` */

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT 'id标识',
  `username` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '用户登录名',
  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '用户登录密码',
  `realname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '用户真实姓名',
  `gender` int DEFAULT NULL COMMENT '用户性别',
  `email` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '用户邮箱',
  `telephone` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '手机号',
  `role` int DEFAULT NULL COMMENT '用户权限 0:普通用户 1:试题管理员 2:系统管理员',
  `wxId` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL COMMENT '微信用户唯一标示 openId',
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '最后更新时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `wxId_UNIQUE` (`wxId`),
  UNIQUE KEY `login_user_telephone_uindex` (`telephone`),
  UNIQUE KEY `username_UNIQUE` (`username`),
  UNIQUE KEY `email_UNIQUE` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

/*Data for the table `user` */

insert  into `user`(`id`,`username`,`password`,`realname`,`gender`,`email`,`telephone`,`role`,`wxId`,`createtime`,`updatetime`) values (1,'user','1','test',0,'123@qq.com','12345',1,'test','2020-04-26 19:34:23','2020-04-27 17:56:11'),(2,'test1','123456','tom',0,'hjsdha@qq.com','4312321312',0,'oULrs4hB0CJ_xtt6StI3kGCCznSY','2020-04-26 20:36:10','2020-04-27 17:56:19'),(5,'tom','123','tt',1,'234@qq.com','1378283',0,'test2','2020-04-27 17:55:43','2020-04-27 17:58:10');

/*Table structure for table `worry_topic` */

DROP TABLE IF EXISTS `worry_topic`;

CREATE TABLE `worry_topic` (
  `id` int NOT NULL AUTO_INCREMENT COMMENT 'id标识',
  `user_id` int DEFAULT NULL COMMENT '用户id',
  `record_id` int DEFAULT NULL COMMENT '做题记录表id',
  `exam_id` int DEFAULT NULL COMMENT '试卷id',
  `topic_id` int DEFAULT NULL COMMENT '题目id',
  `worryanswer` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '错误答案',
  `correctanswer` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '正确答案',
  `worrycount` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL COMMENT '错误次数',
  `createtime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updatetime` datetime DEFAULT CURRENT_TIMESTAMP COMMENT '最后更新时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin;

/*Data for the table `worry_topic` */

insert  into `worry_topic`(`id`,`user_id`,`record_id`,`exam_id`,`topic_id`,`worryanswer`,`correctanswer`,`worrycount`,`createtime`,`updatetime`) values (1,2,1,1,1,'A','B','16','2020-04-26 20:37:24','2020-04-26 20:37:24'),(2,2,1,1,6,'B','D','22','2020-04-26 20:37:24','2020-04-26 20:37:24'),(3,2,1,1,7,'B','C','16','2020-04-26 20:37:24','2020-04-26 20:37:24'),(4,2,1,1,14,'A','D','21','2020-04-26 20:37:24','2020-04-26 20:37:24'),(5,2,1,1,18,'B','D','22','2020-04-26 20:37:24','2020-04-26 20:37:24'),(6,2,1,1,24,'C','A','16','2020-04-26 20:37:24','2020-04-26 20:37:24'),(7,2,2,1,11,'A','B','21','2020-04-26 22:46:48','2020-04-26 22:46:48'),(8,2,2,1,21,'','B','17','2020-04-26 22:46:48','2020-04-26 22:46:48'),(9,2,2,1,41,'D','B','16','2020-04-26 22:46:48','2020-04-26 22:46:48'),(10,2,2,1,42,'','D','21','2020-04-26 22:46:48','2020-04-26 22:46:48'),(11,2,5,2,13,'','D','4','2020-04-26 23:05:03','2020-04-26 23:05:03'),(12,2,5,2,15,'C','D','4','2020-04-26 23:05:03','2020-04-26 23:05:03'),(13,2,5,2,22,'D','C','4','2020-04-26 23:05:03','2020-04-26 23:05:03'),(14,2,5,2,37,'C','D','4','2020-04-26 23:05:03','2020-04-26 23:05:03'),(15,2,16,2,43,'','C','3','2020-04-26 23:13:32','2020-04-26 23:13:32'),(16,100,100,100,44,'C','A','2','2020-04-27 18:04:32','2020-04-27 18:04:32'),(17,100,100,100,44,'D','A','2','2020-04-27 18:04:59','2020-04-27 18:04:59'),(18,100,100,100,44,'D','A','1','2020-04-27 18:05:25','2020-04-27 18:05:25'),(19,100,100,100,44,'B','A','1','2020-04-27 18:05:45','2020-04-27 18:05:45'),(20,100,100,100,43,'D','A','2','2020-04-27 18:06:39','2020-04-27 18:06:39'),(21,100,100,100,43,'B','A','2','2020-04-27 18:08:03','2020-04-27 18:08:03'),(22,100,100,100,43,'B','C','1','2020-04-27 18:08:34','2020-04-27 18:08:34'),(23,100,100,100,43,'B','A','1','2020-04-27 18:08:42','2020-04-27 18:08:42');

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
